name: CI/CD - Deploy CloudFormation PoC

on:
  push:
    branches:
      - main
  workflow_dispatch:
    inputs:
      environment:
        description: "Select the deployment environment"
        required: true
        default: dev
        type: choice
        options:
          - dev

jobs:
  package-and-deploy:
    runs-on: ubuntu-latest
    env:
      AWS_REGION: ${{ secrets.AWS_REGION }}
      AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
      AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Python 3.11
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      - name: Install zip and wget
        run: sudo apt-get update && sudo apt-get install -y zip wget

      # ------------------ Build Lambda layer (Amazon Linux 2023) ------------------
      - name: Build Lambda layer (cryptography, psycopg2-binary, cffi, pgvector)
        run: |
          mkdir -p layer_build
          docker run --rm -v $PWD/layer_build:/var/task public.ecr.aws/amazonlinux/amazonlinux:2023 /bin/bash -c "
            dnf install -y python3 python3-pip zip gcc libffi-devel postgresql-devel
            python3 -m pip install --upgrade pip
            mkdir -p python
            pip3 install cryptography psycopg2-binary cffi pgvector -t python
            zip -r ingest-dependencies-layer.zip python
            ls -l ingest-dependencies-layer.zip  # verify non-empty zip
            mv ingest-dependencies-layer.zip /var/task/
          "

      # ------------------ Publish Lambda layer ------------------
      - name: Publish Lambda layer
        id: publish_layer
        run: |
          LAYER_ARN=$(aws lambda publish-layer-version \
            --layer-name ingest-dependencies-layer \
            --description "Dependencies for all PoC Lambdas" \
            --zip-file fileb://layer_build/ingest-dependencies-layer.zip \
            --compatible-runtimes python3.11 \
            --region $AWS_REGION \
            --query 'LayerVersionArn' \
            --output text)
          echo "Layer ARN: $LAYER_ARN"
          echo "LAYER_ARN=$LAYER_ARN" >> $GITHUB_ENV

      # ------------------ Prepare Lambda packages ------------------
      - name: Prepare Lambda packages
        run: |
          mkdir -p package

          # Copy all Python files from lambda/ to package/
          cp lambda/*.py package/

          # Optional: install lightweight dependencies (excluding numpy)
          python -m pip install --upgrade pip
          pip install --target ./package -r lambda/requirements.txt --no-deps

          # Create zips for each Lambda
          pushd package
          zip -r ../ingest.zip *
          zip -r ../knowledgebase_handler.zip *
          zip -r ../init_db.zip *
          popd

      # ------------------ Upload Lambda artifacts to S3 ------------------
      - name: Upload Lambda artifacts to S3
        run: |
          BUCKET_NAME=$(echo "${{ secrets.CFN_CODE_BUCKET }}" | sed -E 's#^arn:aws:s3:::(.+)$#\1#')
          aws s3 cp ingest.zip s3://$BUCKET_NAME/lambda/ingest.zip --region $AWS_REGION
          aws s3 cp knowledgebase_handler.zip s3://$BUCKET_NAME/lambda/knowledgebase_handler.zip --region $AWS_REGION
          aws s3 cp init_db.zip s3://$BUCKET_NAME/lambda/init_db.zip --region $AWS_REGION

      # ------------------ Deploy CloudFormation ------------------
      - name: Deploy CloudFormation
        run: |
          aws cloudformation deploy \
            --template-file cft/template.yml \
            --stack-name bedrock-s3-ingest-poc \
            --capabilities CAPABILITY_NAMED_IAM \
            --parameter-overrides \
              IngestLambdaS3Bucket=${{ secrets.CFN_CODE_BUCKET }} \
              IngestLambdaS3Key=lambda/ingest.zip \
              IngestLambdaLayerArn=$LAYER_ARN \
              KnowledgeBaseHandlerS3Bucket=${{ secrets.CFN_CODE_BUCKET }} \
              KnowledgeBaseHandlerS3Key=lambda/knowledgebase_handler.zip \
              KnowledgeBaseHandlerLayerArn=$LAYER_ARN \
              InitDBLambdaS3Bucket=${{ secrets.CFN_CODE_BUCKET }} \
              InitDBLambdaS3Key=lambda/init_db.zip \
              InitDBLambdaLayerArn=$LAYER_ARN \
              DBUsername=poc_admin \
              DBName=bedrock_poc \
            --region $AWS_REGION
