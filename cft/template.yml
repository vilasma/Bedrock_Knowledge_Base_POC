AWSTemplateFormatVersion: '2010-09-09'
Description: >
  PoC: S3 -> Lambda -> AWS Bedrock embeddings -> Aurora PostgreSQL (pgvector)
  Full ingestion + retrieval pipeline with metadata and document-level status.

Parameters:
  DBUsername:
    Type: String
    Default: poc_admin
  DBName:
    Type: String
    Default: bedrock_poc
  InstanceClass:
    Type: String
    Default: db.r6g.large
  DBAllocatedStorage:
    Type: Number
    Default: 20

Resources:

  ### VPC & Subnets
  VPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: 10.0.0.0/16
      EnableDnsHostnames: true
      EnableDnsSupport: true

  PublicSubnet:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: 10.0.1.0/24  # Public subnet for Lambda
      MapPublicIpOnLaunch: true

  PrivateSubnet:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: 10.0.2.0/24  # Private subnet for Aurora
      MapPublicIpOnLaunch: false

  PublicSubnetRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC

  PublicSubnetRoute:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicSubnet
      RouteTableId: !Ref PublicSubnetRouteTable

  ### Security Groups
  RDSSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Allow DB access from Lambda
      VpcId: !Ref VPC

  LambdaSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Lambda functions security group
      VpcId: !Ref VPC

  RDSSGIngressFromLambda:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      GroupId: !Ref RDSSecurityGroup
      IpProtocol: tcp
      FromPort: 5432
      ToPort: 5432
      SourceSecurityGroupId: !Ref LambdaSecurityGroup

  LambdaSGEgressHTTPS:
    Type: AWS::EC2::SecurityGroupEgress
    Properties:
      GroupId: !Ref LambdaSecurityGroup
      IpProtocol: tcp
      FromPort: 443
      ToPort: 443
      CidrIp: 0.0.0.0/0

  ### Aurora PostgreSQL
  DBSubnetGroup:
    Type: AWS::RDS::DBSubnetGroup
    Properties:
      DBSubnetGroupDescription: Aurora pgvector private subnet group
      SubnetIds:
        - !Ref PrivateSubnet

  DBSecret:
    Type: AWS::SecretsManager::Secret
    Properties:
      Name: poc-db-credentials
      GenerateSecretString:
        SecretStringTemplate: !Sub '{"username":"${DBUsername}","dbname":"${DBName}"}'
        GenerateStringKey: password
        PasswordLength: 20

  RDSCluster:
    Type: AWS::RDS::DBCluster
    Properties:
      Engine: aurora-postgresql
      EngineVersion: "15.3"
      DatabaseName: !Ref DBName
      MasterUsername: !Join ["", ["{{resolve:secretsmanager:", !Ref DBSecret, ":SecretString:username}}"]]
      MasterUserPassword: !Join ["", ["{{resolve:secretsmanager:", !Ref DBSecret, ":SecretString:password}}"]]
      DBSubnetGroupName: !Ref DBSubnetGroup
      VpcSecurityGroupIds:
        - !Ref RDSSecurityGroup
      StorageEncrypted: true

  RDSClusterInstance:
    Type: AWS::RDS::DBInstance
    Properties:
      DBClusterIdentifier: !Ref RDSCluster
      DBInstanceClass: !Ref InstanceClass
      Engine: aurora-postgresql
      PubliclyAccessible: false

  ### IAM Role for Lambda
  LambdaExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      Policies:
        - PolicyName: BedrockS3RDSAccess
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - s3:GetObject
                  - s3:ListBucket
                Resource: !Sub arn:aws:s3:::bedrock-poc-ingest-bucket/*
              - Effect: Allow
                Action:
                  - secretsmanager:GetSecretValue
                Resource: !Ref DBSecret
              - Effect: Allow
                Action:
                  - rds-db:connect
                Resource: "*"
              - Effect: Allow
                Action:
                  - bedrock:InvokeModel
                Resource: "*"
              - Effect: Allow
                Action:
                  - ec2:CreateNetworkInterface
                  - ec2:DescribeNetworkInterfaces
                  - ec2:DeleteNetworkInterface
                Resource: "*"

  ### Init DB Lambda
  InitDBLambda:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: poc-init-db
      Runtime: python3.11
      Handler: init_db.lambda_handler
      Role: !GetAtt LambdaExecutionRole.Arn
      Timeout: 300
      MemorySize: 512
      VpcConfig:
        SecurityGroupIds:
          - !Ref LambdaSecurityGroup
        SubnetIds:
          - !Ref PublicSubnet
      Code:
        S3Bucket: bedrock-poc-ingest-bucket
        S3Key: lambda/init_db.zip
      Environment:
        Variables:
          DB_SECRET_ARN: !Ref DBSecret
          DB_NAME: !Ref DBName
          DB_HOST: !GetAtt RDSCluster.Endpoint.Address
          DB_PORT: !GetAtt RDSCluster.Endpoint.Port
          REGION: ap-south-1

  ### Ingest Lambda
  IngestLambdaFunction:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: poc-s3-ingest
      Runtime: python3.11
      Handler: ingest.lambda_handler
      Role: !GetAtt LambdaExecutionRole.Arn
      Timeout: 300
      MemorySize: 1024
      VpcConfig:
        SecurityGroupIds:
          - !Ref LambdaSecurityGroup
        SubnetIds:
          - !Ref PublicSubnet
      Code:
        S3Bucket: bedrock-poc-ingest-bucket
        S3Key: lambda/ingest.zip
      Environment:
        Variables:
          DB_SECRET_ARN: !Ref DBSecret
          DB_NAME: !Ref DBName
          DB_HOST: !GetAtt RDSCluster.Endpoint.Address
          DB_PORT: !GetAtt RDSCluster.Endpoint.Port
          REGION: ap-south-1
          METADATA_FIELDS: "tenant_id,user_id,document_id,project_id,thread_id"

  ### S3 Bucket
  S3IngestBucket:
    Type: AWS::S3::Bucket
    Properties:
      NotificationConfiguration:
        LambdaConfigurations:
          - Event: s3:ObjectCreated:*
            Function: !GetAtt IngestLambdaFunction.Arn

  LambdaPermissionForS3:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !Ref IngestLambdaFunction
      Action: lambda:InvokeFunction
      Principal: s3.amazonaws.com
      SourceAccount: !Ref AWS::AccountId

  ### Knowledge Base Handler Lambda
  KnowledgeBaseHandlerFunction:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: poc-kb-handler
      Runtime: python3.11
      Handler: knowledgebase_handler.lambda_handler
      Role: !GetAtt LambdaExecutionRole.Arn
      Timeout: 300
      MemorySize: 1024
      VpcConfig:
        SecurityGroupIds:
          - !Ref LambdaSecurityGroup
        SubnetIds:
          - !Ref PublicSubnet
      Code:
        S3Bucket: bedrock-poc-ingest-bucket
        S3Key: lambda/knowledgebase_handler.zip
      Environment:
        Variables:
          DB_SECRET_ARN: !Ref DBSecret
          DB_NAME: !Ref DBName
          DB_HOST: !GetAtt RDSCluster.Endpoint.Address
          DB_PORT: !GetAtt RDSCluster.Endpoint.Port
          REGION: ap-south-1

  ### VPC Endpoints
  SecretsManagerVPCEndpoint:
    Type: AWS::EC2::VPCEndpoint
    Properties:
      VpcId: !Ref VPC
      ServiceName: com.amazonaws.ap-south-1.secretsmanager
      SubnetIds:
        - !Ref PublicSubnet
      SecurityGroupIds:
        - !Ref LambdaSecurityGroup
      VpcEndpointType: Interface

  S3VPCEndpoint:
    Type: AWS::EC2::VPCEndpoint
    Properties:
      VpcId: !Ref VPC
      ServiceName: com.amazonaws.ap-south-1.s3
      RouteTableIds:
        - !Ref PublicSubnetRouteTable
      VpcEndpointType: Gateway

  BedrockVPCEndpoint:
    Type: AWS::EC2::VPCEndpoint
    Properties:
      VpcId: !Ref VPC
      ServiceName: com.amazonaws.ap-south-1.bedrock-runtime
      SubnetIds:
        - !Ref PublicSubnet
      SecurityGroupIds:
        - !Ref LambdaSecurityGroup
      VpcEndpointType: Interface

  ### Bedrock Knowledge Base
  # BedrockKnowledgeBase:
  #   Type: AWS::Bedrock::KnowledgeBase
  #   Properties:
  #     Name: poc-bedrock-kb
  #     Description: Knowledge Base for Aurora PostgreSQL (pgvector) ingestion PoC
  #     ClientToken: !Sub poc-bedrock-kb-${AWS::Region}
  #     RoleArn: !GetAtt LambdaExecutionRole.Arn
  #     StorageConfiguration:
  #       RdsConfiguration:
  #         ClusterArn: !GetAtt RDSCluster.DBClusterArn
  #         CredentialsSecretArn: !Ref DBSecret
  #         DatabaseName: !Ref DBName
  #         TableName: document_chunks
  #         MetadataFields:
  #           - tenant_id
  #           - user_id
  #           - document_id
  #           - project_id
  #           - thread_id

Outputs:
  S3BucketName:
    Description: Upload documents to this bucket
    Value: !Ref S3IngestBucket

  RDSClusterEndpoint:
    Description: Aurora cluster endpoint
    Value: !GetAtt RDSCluster.Endpoint.Address

  RDSClusterPort:
    Description: Aurora cluster port
    Value: !GetAtt RDSCluster.Endpoint.Port

  DBSecretArn:
    Description: Secrets Manager ARN containing DB credentials
    Value: !Ref DBSecret

  InitDBLambdaName:
    Description: Lambda function to initialize DB
    Value: !Ref InitDBLambda

  IngestLambdaName:
    Description: Lambda function for ingestion
    Value: !Ref IngestLambdaFunction

  KnowledgeBaseHandlerLambdaName:
    Description: Lambda function to query/retrieve document chunks
    Value: !Ref KnowledgeBaseHandlerFunction
  
  # BedrockKnowledgeBaseArn:
  #   Description: ARN of the Bedrock Knowledge Base
  #   Value: !Ref BedrockKnowledgeBase
