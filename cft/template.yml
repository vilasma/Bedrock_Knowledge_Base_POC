AWSTemplateFormatVersion: '2010-09-09'
Description: >-
  PoC: S3 -> Lambda (in VPC) -> AWS Bedrock embeddings -> PostgreSQL (RDS in
  private subnets)

Parameters:
  CodeS3Bucket:
    Type: String
    Description: S3 bucket name where Lambda artifact zip will be uploaded by CI (must not include folder paths)
  CodeS3Key:
    Type: String
    Description: S3 key (path) to the Lambda artifact zip within the bucket (e.g., lambda/ingest.zip)
  DBUsername:
    Type: String
    Default: poc_admin
  DBName:
    Type: String
    Default: bedrock_poc
  InstanceClass:
    Type: String
    Default: db.t3.micro
  DBAllocatedStorage:
    Type: Number
    Default: 20
  VpcCidr:
    Type: String
    Default: 10.0.0.0/16
  EmbeddingModel:
    Type: String
    Default: Titan
    AllowedValues:
      - Titan
      - Cohere
    Description: Choose the embedding model (Titan or Cohere)
  VectorStore:
    Type: String
    Default: AuroraPgVector
    AllowedValues:
      - AuroraPgVector
      - OpenSearch
    Description: Choose the vector store (Aurora pgvector or OpenSearch)

Resources:
  ### Networking: VPC, Subnets, IGW, NAT, RouteTables
  VPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: !Ref VpcCidr
      EnableDnsHostnames: true
      EnableDnsSupport: true
      Tags:
        - Key: Name
          Value: bedrock-poc-vpc

  PublicSubnet:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: 10.0.3.0/24
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: bedrock-poc-public-subnet

  PrivateSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: 10.0.1.0/24
      AvailabilityZone: ap-south-1a
      Tags:
        - Key: Name
          Value: bedrock-poc-private-subnet-1

  PrivateSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: 10.0.2.0/24
      AvailabilityZone: ap-south-1b
      Tags:
        - Key: Name
          Value: bedrock-poc-private-subnet-2

  InternetGateway:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
        - Key: Name
          Value: bedrock-poc-igw

  AttachGateway:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId: !Ref VPC
      InternetGatewayId: !Ref InternetGateway

  PublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: bedrock-poc-public-rt

  PublicRoute:
    Type: AWS::EC2::Route
    DependsOn: AttachGateway
    Properties:
      RouteTableId: !Ref PublicRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway

  PublicSubnetRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicSubnet
      RouteTableId: !Ref PublicRouteTable

  NATGatewayEIP:
    Type: AWS::EC2::EIP
    Properties:
      Domain: vpc

  NATGateway:
    Type: AWS::EC2::NatGateway
    Properties:
      AllocationId: !GetAtt NATGatewayEIP.AllocationId
      SubnetId: !Ref PublicSubnet
      Tags:
        - Key: Name
          Value: bedrock-poc-nat

  PrivateRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: bedrock-poc-private-rt

  PrivateRoute:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref PrivateRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !Ref NATGateway

  PrivateSubnet1Association:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PrivateSubnet1
      RouteTableId: !Ref PrivateRouteTable

  PrivateSubnet2Association:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PrivateSubnet2
      RouteTableId: !Ref PrivateRouteTable

  ### RDS Subnet Group
  DBSubnetGroup:
    Type: AWS::RDS::DBSubnetGroup
    Properties:
      DBSubnetGroupDescription: Subnet group for RDS (private subnets)
      SubnetIds:
        - !Ref PrivateSubnet1
        - !Ref PrivateSubnet2
      Tags:
        - Key: Name
          Value: bedrock-poc-db-subnet-group

  ### Secrets Manager for DB credentials
  DBSecret:
    Type: AWS::SecretsManager::Secret
    Properties:
      Name: bedrock-poc/db-credentials
      Description: Credentials for the PoC PostgreSQL database
      GenerateSecretString:
        SecretStringTemplate: !Sub '{"username":"${DBUsername}","dbname":"${DBName}"}'
        GenerateStringKey: password
        PasswordLength: 20
        ExcludeCharacters: '/@" '  # Exclude invalid characters for RDS passwords

  ### Security Groups
  RDSSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Allow DB access from Lambda security group
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: bedrock-poc-rds-sg

  LambdaSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Lambda functions security group
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: bedrock-poc-lambda-sg

  RDSSGIngressFromLambda:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      GroupId: !Ref RDSSecurityGroup
      IpProtocol: tcp
      FromPort: 5432
      ToPort: 5432
      SourceSecurityGroupId: !Ref LambdaSecurityGroup

  ### RDS Instance (private)
  RDSInstance:
    Type: AWS::RDS::DBInstance
    Properties:
      DBName: !Ref DBName
      AllocatedStorage: !Ref DBAllocatedStorage
      DBInstanceClass: !Ref InstanceClass
      Engine: postgres
      MasterUsername: !Join ["", ["{{resolve:secretsmanager:", !Ref DBSecret, ":SecretString:username}}"]]
      MasterUserPassword: !Join ["", ["{{resolve:secretsmanager:", !Ref DBSecret, ":SecretString:password}}"]]
      VPCSecurityGroups:
        - !Ref RDSSecurityGroup
      DBSubnetGroupName: !Ref DBSubnetGroup
      PubliclyAccessible: false
      BackupRetentionPeriod: 0
      DeletionProtection: false
      Tags:
        - Key: Name
          Value: bedrock-poc-rds

  ### IAM Role for Lambda
  LambdaExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action: sts:AssumeRole
      Path: /
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      Policies:
        - PolicyName: BedrockS3RDSAccess
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - s3:GetObject
                  - s3:GetObjectAcl
                  - s3:ListBucket
                Resource: !Sub arn:aws:s3:::${CodeS3Bucket}/*
              - Effect: Allow
                Action:
                  - secretsmanager:GetSecretValue
                Resource: !Ref DBSecret
              - Effect: Allow
                Action:
                  - rds-db:connect
                Resource: !Sub arn:aws:rds-db:ap-south-1:632944299864:*
              - Effect: Allow
                Action:
                  - bedrock:InvokeModel
                  - bedrock:IndexDocument  # Allow indexing documents
                  - bedrock:RetrieveDocument  # Allow retrieving documents
                Resource: !Sub arn:aws:bedrock:ap-south-1:632944299864:*
              - Effect: Allow
                Action:
                  - ec2:CreateNetworkInterface
                  - ec2:DescribeNetworkInterfaces
                  - ec2:DeleteNetworkInterface
                Resource: "*"

  ### Lambda function (in VPC)
  IngestLambdaFunction:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: bedrock-s3-ingest-poc
      Runtime: python3.11
      Handler: ingest.lambda_handler
      Role: !GetAtt LambdaExecutionRole.Arn
      Timeout: 300
      MemorySize: 1024
      VpcConfig:
        SecurityGroupIds:
          - !Ref LambdaSecurityGroup
        SubnetIds:
          - !Ref PrivateSubnet1
          - !Ref PrivateSubnet2
      Code:
        S3Bucket: !Ref CodeS3Bucket
        S3Key: !Ref CodeS3Key
      Environment:
        Variables:
          DB_SECRET_ARN: !Ref DBSecret
          DB_NAME: !Ref DBName
          DB_HOST: !GetAtt RDSInstance.Endpoint.Address
          DB_PORT: !GetAtt RDSInstance.Endpoint.Port
          REGION: ap-south-1
          METADATA_FIELDS: "Tenant_Id,User_Id,Document_Id,Project_Id,Thread_Id" # New metadata fields

  ### Lambda function for Knowledge Base Handler
  KnowledgeBaseHandlerFunction:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: bedrock-knowledge-base-handler
      Runtime: python3.11
      Handler: knowledgebase_handler.lambda_handler
      Role: !GetAtt LambdaExecutionRole.Arn
      Timeout: 300
      MemorySize: 1024
      VpcConfig:
        SecurityGroupIds:
          - !Ref LambdaSecurityGroup
        SubnetIds:
          - !Ref PrivateSubnet1
          - !Ref PrivateSubnet2
      Code:
        S3Bucket: !Ref CodeS3Bucket
        S3Key: lambda/knowledgebase_handler.zip
      Environment:
        Variables:
          CHUNK_SIZE: "800"
          OVERLAP: "100"

  ### S3 Bucket for ingestion (uploads trigger Lambda)
  S3IngestBucket:
    Type: AWS::S3::Bucket
    Properties:
      NotificationConfiguration:
        LambdaConfigurations:
          - Event: s3:ObjectCreated:*
            Function: !GetAtt IngestLambdaFunction.Arn
      Tags:
        - Key: Name
          Value: bedrock-poc-ingest-bucket

  LambdaPermissionForS3:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !Ref IngestLambdaFunction
      Action: lambda:InvokeFunction
      Principal: s3.amazonaws.com
      SourceAccount: 632944299864

  ### Knowledge Base Custom Resource
  KnowledgeBase:
    Type: Custom::BedrockKnowledgeBase
    Properties:
      ServiceToken: !GetAtt KnowledgeBaseHandlerFunction.Arn
      S3Bucket: !Ref S3IngestBucket
      EmbeddingModel: !Ref EmbeddingModel
      VectorStore: !Ref VectorStore
      MetadataFields:
        - Tenant_Id
        - User_Id
        - Document_Id
        - Project_Id
        - Thread_Id

Outputs:
  S3BucketName:
    Description: Upload documents to this bucket to trigger ingestion
    Value: !Ref S3IngestBucket

  RDSInstanceEndpoint:
    Description: RDS endpoint (use Secrets Manager for password)
    Value: !GetAtt RDSInstance.Endpoint.Address

  RDSInstancePort:
    Description: RDS endpoint port
    Value: !GetAtt RDSInstance.Endpoint.Port

  DBSecretArn:
    Description: Secrets Manager ARN containing DB credentials
    Value: !Ref DBSecret

  VpcId:
    Description: VPC Id
    Value: !Ref VPC

  PrivateSubnet1:
    Description: Private subnet 1
    Value: !Ref PrivateSubnet1

  PrivateSubnet2:
    Description: Private subnet 2
    Value: !Ref PrivateSubnet2

  KnowledgeBaseId:
    Description: ID of the Bedrock Knowledge Base
    Value: !Ref KnowledgeBase

  KnowledgeBaseEmbeddingModel:
    Description: Embedding model used for the Knowledge Base
    Value: !Ref EmbeddingModel

  KnowledgeBaseVectorStore:
    Description: Vector store used for the Knowledge Base
    Value: !Ref VectorStore

  MetadataFields:
    Description: Metadata fields used for document chunks
    Value: "Tenant_Id, User_Id, Document_Id, Project_Id, Thread_Id"