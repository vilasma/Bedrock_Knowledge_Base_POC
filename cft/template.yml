AWSTemplateFormatVersion: '2010-09-09'
Description: >
  PoC: S3 -> Lambda -> AWS Bedrock embeddings -> Aurora PostgreSQL (pgvector)
  Full ingestion + retrieval pipeline with metadata and document-level status.

Parameters:
  DBUsername:
    Type: String
    Default: poc_admin
  DBName:
    Type: String
    Default: bedrock_poc
  InstanceClass:
    Type: String
    Default: db.r6g.large
  DBAllocatedStorage:
    Type: Number
    Default: 20

Resources:
  ### VPC & Subnets
  VPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: 10.0.0.0/16
      EnableDnsHostnames: true
      EnableDnsSupport: true
      Tags:
        - Key: Name
          Value: poc-vpc

  InternetGateway:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
        - Key: Name
          Value: poc-igw

  AttachIGW:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId: !Ref VPC
      InternetGatewayId: !Ref InternetGateway

  ### Public Subnet
  PublicSubnet:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: 10.0.10.0/24
      AvailabilityZone: us-east-1a
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: poc-public-subnet

  ### Private Subnets
  PrivateSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: 10.0.20.0/24
      AvailabilityZone: us-east-1a
      MapPublicIpOnLaunch: false
      Tags:
        - Key: Name
          Value: poc-private-subnet-1

  PrivateSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: 10.0.21.0/24
      AvailabilityZone: us-east-1b
      MapPublicIpOnLaunch: false
      Tags:
        - Key: Name
          Value: poc-private-subnet-2

  ### Public Route Table
  PublicSubnetRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: poc-public-rt

  PublicSubnetRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicSubnet
      RouteTableId: !Ref PublicSubnetRouteTable

  PublicSubnetDefaultRoute:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref PublicSubnetRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway

  ### NAT Gateway for Private Subnets
  ElasticIP:
    Type: AWS::EC2::EIP
    Properties:
      Domain: vpc

  NATGateway:
    Type: AWS::EC2::NatGateway
    Properties:
      AllocationId: !GetAtt ElasticIP.AllocationId
      SubnetId: !Ref PublicSubnet
      Tags:
        - Key: Name
          Value: poc-nat-gateway

  ### Private Route Table
  PrivateRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: poc-private-rt

  PrivateSubnet1RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PrivateSubnet1
      RouteTableId: !Ref PrivateRouteTable

  PrivateSubnet2RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PrivateSubnet2
      RouteTableId: !Ref PrivateRouteTable

  PrivateDefaultRoute:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref PrivateRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !Ref NATGateway

  ### Security Groups
  RDSSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Allow DB access from Lambda
      VpcId: !Ref VPC

  LambdaSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Lambda functions security group
      VpcId: !Ref VPC

  RDSSGIngressFromLambda:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      GroupId: !Ref RDSSecurityGroup
      IpProtocol: tcp
      FromPort: 5432
      ToPort: 5432
      SourceSecurityGroupId: !Ref LambdaSecurityGroup

  LambdaSGEgressHTTPS:
    Type: AWS::EC2::SecurityGroupEgress
    Properties:
      GroupId: !Ref LambdaSecurityGroup
      IpProtocol: tcp
      FromPort: 443
      ToPort: 443
      CidrIp: 0.0.0.0/0

  LambdaSGEgressToRDS:
    Type: AWS::EC2::SecurityGroupEgress
    Properties:
      GroupId: !Ref LambdaSecurityGroup
      IpProtocol: tcp
      FromPort: 5432
      ToPort: 5432
      DestinationSecurityGroupId: !Ref RDSSecurityGroup

  ### Aurora PostgreSQL (multi-AZ) with Data API
  DBSubnetGroup:
    Type: AWS::RDS::DBSubnetGroup
    Properties:
      DBSubnetGroupDescription: Aurora pgvector private subnet group (multi-AZ)
      SubnetIds:
        - !Ref PrivateSubnet1
        - !Ref PrivateSubnet2

  DBSecret:
    Type: AWS::SecretsManager::Secret
    Properties:
      Name: bedrock-poc-ingest-db-secret
      Description: "Credentials for Aurora PostgreSQL used by Bedrock PoC"
      GenerateSecretString:
        SecretStringTemplate: !Sub '{"username":"${DBUsername}","dbname":"${DBName}"}'
        GenerateStringKey: password
        PasswordLength: 20
        ExcludeCharacters: '/@" '   # ✅ exclude invalid characters

  RDSCluster:
    Type: AWS::RDS::DBCluster
    Properties:
      Engine: aurora-postgresql
      EngineVersion: "15.3"
      DatabaseName: !Ref DBName
      MasterUsername: !Join ["", ["{{resolve:secretsmanager:", !Ref DBSecret, ":SecretString:username}}"]]
      MasterUserPassword: !Join ["", ["{{resolve:secretsmanager:", !Ref DBSecret, ":SecretString:password}}"]]
      DBSubnetGroupName: !Ref DBSubnetGroup
      VpcSecurityGroupIds:
        - !Ref RDSSecurityGroup
      StorageEncrypted: true
      Port: 5432
      EnableHttpEndpoint: true   # ✅ Enables RDS Data API

  RDSClusterInstance:
    Type: AWS::RDS::DBInstance
    DeletionPolicy: Retain
    UpdateReplacePolicy: Retain
    Properties:
      DBClusterIdentifier: !Ref RDSCluster
      DBInstanceClass: !Ref InstanceClass
      Engine: aurora-postgresql
      PubliclyAccessible: false

  ### IAM Role for Lambda
  LambdaExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      Policies:
        - PolicyName: BedrockS3RDSAccess
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - s3:ListBucket
                Resource: !Sub arn:aws:s3:::bedrock-ingest-bucket
              - Effect: Allow
                Action:
                  - s3:GetObject
                Resource: !Sub arn:aws:s3:::bedrock-ingest-bucket/*
              - Effect: Allow
                Action:
                  - secretsmanager:GetSecretValue
                Resource: !Ref DBSecret
              - Effect: Allow
                Action:
                  - rds-db:connect
                  - rds-data:ExecuteStatement
                  - rds-data:BatchExecuteStatement
                  - rds-data:BeginTransaction
                  - rds-data:CommitTransaction
                  - rds-data:RollbackTransaction
                Resource: "*"
              - Effect: Allow
                Action:
                  - bedrock:InvokeModel
                  - bedrock:CreateKnowledgeBase
                Resource: "*"
              - Effect: Allow
                Action:
                  - ec2:CreateNetworkInterface
                  - ec2:DescribeNetworkInterfaces
                  - ec2:DeleteNetworkInterface
                Resource: "*"

  ### Lambda Functions (all in private subnets)
  InitDBLambda:
    Type: AWS::Lambda::Function
    DependsOn: RDSClusterInstance   # ✅ Ensures DB is created before init Lambda
    Properties:
      FunctionName: poc-init-db
      Runtime: python3.11
      Handler: init_db.lambda_handler
      Role: !GetAtt LambdaExecutionRole.Arn
      Timeout: 300
      MemorySize: 512
      VpcConfig:
        SecurityGroupIds:
          - !Ref LambdaSecurityGroup
        SubnetIds:
          - !Ref PrivateSubnet1
          - !Ref PrivateSubnet2
      Code:
        S3Bucket: bedrock-ingest-bucket
        S3Key: lambda/init_db.zip
      Environment:
        Variables:
          INPUT_S3_DIR: bedrock-ingest-bucket
          DB_SECRET_ARN: !Ref DBSecret
          DB_NAME: !Ref DBName
          DB_CLUSTER_ARN: !Ref RDSCluster
          DB_HOST: !GetAtt RDSCluster.Endpoint.Address
          DB_PORT: !GetAtt RDSCluster.Endpoint.Port
          REGION: us-east-1

  IngestLambdaFunction:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: poc-s3-ingest
      Runtime: python3.11
      Handler: ingest.lambda_handler
      Role: !GetAtt LambdaExecutionRole.Arn
      Timeout: 300
      MemorySize: 1024
      VpcConfig:
        SecurityGroupIds:
          - !Ref LambdaSecurityGroup
        SubnetIds:
          - !Ref PrivateSubnet1
          - !Ref PrivateSubnet2
      Code:
        S3Bucket: bedrock-ingest-bucket
        S3Key: lambda/ingest.zip
      Environment:
        Variables:
          INPUT_S3_DIR: bedrock-ingest-bucket
          DB_HOST: !GetAtt RDSCluster.Endpoint.Address
          DB_PORT: !GetAtt RDSCluster.Endpoint.Port
          DB_CLUSTER_ARN: !Ref RDSCluster
          DB_SECRET_ARN: !Ref DBSecret
          DB_NAME: !Ref DBName
          REGION: us-east-1
          METADATA_FIELDS: "tenant_id,user_id,document_id,project_id,thread_id"

  KnowledgeBaseHandlerFunction:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: poc-kb-handler
      Runtime: python3.11
      Handler: knowledgebase_handler.lambda_handler
      Role: !GetAtt LambdaExecutionRole.Arn
      Timeout: 300
      MemorySize: 1024
      VpcConfig:
        SecurityGroupIds:
          - !Ref LambdaSecurityGroup
        SubnetIds:
          - !Ref PrivateSubnet1
          - !Ref PrivateSubnet2
      Code:
        S3Bucket: bedrock-ingest-bucket
        S3Key: lambda/knowledgebase_handler.zip
      Environment:
        Variables:
          INPUT_S3_DIR: bedrock-ingest-bucket
          DB_HOST: !GetAtt RDSCluster.Endpoint.Address
          DB_PORT: !GetAtt RDSCluster.Endpoint.Port
          DB_CLUSTER_ARN: !Ref RDSCluster
          DB_SECRET_ARN: !Ref DBSecret
          DB_NAME: !Ref DBName
          REGION: us-east-1

  LambdaPermissionForS3:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !Ref IngestLambdaFunction
      Action: lambda:InvokeFunction
      Principal: s3.amazonaws.com
      SourceArn: arn:aws:s3:::bedrock-ingest-bucket
      SourceAccount: !Ref AWS::AccountId

  ### VPC Endpoints for Private Subnet access
  SecretsManagerVPCEndpoint:
    Type: AWS::EC2::VPCEndpoint
    Properties:
      VpcId: !Ref VPC
      ServiceName: !Sub com.amazonaws.${AWS::Region}.secretsmanager
      SubnetIds:
        - !Ref PrivateSubnet1
        - !Ref PrivateSubnet2
      SecurityGroupIds:
        - !Ref LambdaSecurityGroup
      VpcEndpointType: Interface

  S3VPCEndpoint:
    Type: AWS::EC2::VPCEndpoint
    Properties:
      VpcId: !Ref VPC
      ServiceName: !Sub com.amazonaws.${AWS::Region}.s3
      RouteTableIds:
        - !Ref PrivateRouteTable
      VpcEndpointType: Gateway

  BedrockVPCEndpoint:
    Type: AWS::EC2::VPCEndpoint
    Properties:
      VpcId: !Ref VPC
      ServiceName: !Sub com.amazonaws.${AWS::Region}.bedrock-runtime
      SubnetIds:
        - !Ref PrivateSubnet1
        - !Ref PrivateSubnet2
      SecurityGroupIds:
        - !Ref LambdaSecurityGroup
      VpcEndpointType: Interface

  ### Bedrock Knowledge Base IAM Role
  BedrockKnowledgeBaseRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: poc-bedrock-kb-role
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: bedrock.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AmazonRDSDataFullAccess
        - arn:aws:iam::aws:policy/SecretsManagerReadWrite   # ✅ lets Bedrock read DB credentials
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      Policies:
        - PolicyName: BedrockKBExtraPermissions
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - rds:DescribeDBClusters
                  - rds:DescribeDBInstances
                Resource: "*"   # ✅ Bedrock needs to inspect your Aurora cluster
              - Effect: Allow
                Action:
                  - rds-data:ExecuteStatement
                Resource: !Sub arn:aws:rds:${AWS::Region}:${AWS::AccountId}:cluster/${RDSCluster}

  BedrockKnowledgeBase:
    Type: AWS::Bedrock::KnowledgeBase
    DependsOn: 
      - KnowledgeBaseHandlerFunction
    Properties:
      Name: poc-bedrock-kb
      Description: "Knowledge Base for Aurora PostgreSQL ingestion PoC"
      RoleArn: !GetAtt BedrockKnowledgeBaseRole.Arn
      KnowledgeBaseConfiguration:
        Type: VECTOR
        VectorKnowledgeBaseConfiguration:
          EmbeddingModelArn: arn:aws:bedrock:us-east-1::foundation-model/amazon.titan-embed-text-v1
      StorageConfiguration:
        Type: RDS
        RdsConfiguration:
          ResourceArn: !GetAtt RDSCluster.DBClusterArn
          CredentialsSecretArn: !Ref DBSecret
          DatabaseName: !Ref DBName
          TableName: "document_chunks"
          FieldMapping:
            PrimaryKeyField: document_id
            VectorField: embedding_vector
            TextField: chunk_text
            MetadataField: metadata

  KnowledgeBaseDataSource:
    Type: AWS::Bedrock::DataSource
    Properties:
      KnowledgeBaseId: !Ref BedrockKnowledgeBase
      Name: "Knowledge-Base-DataSource"
      Description: "S3 bucket for Bedrock RAG ingestion"
      DataSourceConfiguration:
        Type: S3
        S3Configuration:
          BucketArn: arn:aws:s3:::bedrock-ingest-bucket
          InclusionPrefixes:
            - "lambda/"

Outputs:
  RDSClusterEndpoint:
    Description: Aurora cluster endpoint
    Value: !GetAtt RDSCluster.Endpoint.Address

  RDSClusterPort:
    Description: Aurora cluster port
    Value: !GetAtt RDSCluster.Endpoint.Port

  DBSecretArn:
    Description: Secrets Manager ARN containing DB credentials
    Value: !Ref DBSecret

  InitDBLambdaName:
    Description: Lambda function to initialize DB
    Value: !Ref InitDBLambda

  IngestLambdaName:
    Description: Lambda function for ingestion
    Value: !Ref IngestLambdaFunction

  KnowledgeBaseHandlerLambdaName:
    Description: Lambda function to query/retrieve document chunks
    Value: !Ref KnowledgeBaseHandlerFunction
  
  BedrockKnowledgeBaseArn:
    Description: ARN of the Bedrock Knowledge Base
    Value: !Ref BedrockKnowledgeBase

  BedrockKnowledgeBaseId:
    Description: Name of the Bedrock Knowledge Base
    Value: !GetAtt BedrockKnowledgeBase

  BedrockKnowledgeBaseRoleArn:
    Description: IAM Role ARN used by Bedrock Knowledge Base
    Value: !GetAtt BedrockKnowledgeBaseRole.Arn