AWSTemplateFormatVersion: '2010-09-09'
Description: >
  PoC: S3 -> Lambda -> AWS Bedrock embeddings -> Aurora PostgreSQL (pgvector)
  Full ingestion + retrieval pipeline with metadata and document-level status.

Parameters:
  DBUsername:
    Type: String
    Default: poc_admin
  DBName:
    Type: String
    Default: bedrock_poc
  InstanceClass:
    Type: String
    Default: db.r6g.large
  DBAllocatedStorage:
    Type: Number
    Default: 20
  # OpenSearchIndexName:
  #   Type: String
  #   Default: kb-sync-data-index
  #   Description: "OpenSearch index name for storing vector chunks"

Resources:
  ### VPC & Subnets
  VPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: 10.0.0.0/16
      EnableDnsHostnames: true
      EnableDnsSupport: true
      Tags:
        - Key: Name
          Value: poc-vpc

  InternetGateway:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
        - Key: Name
          Value: poc-igw

  AttachIGW:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId: !Ref VPC
      InternetGatewayId: !Ref InternetGateway

  ### Public Subnet
  PublicSubnet:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: 10.0.10.0/24
      AvailabilityZone: us-east-1a
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: poc-public-subnet

  ### Private Subnets
  PrivateSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: 10.0.20.0/24
      AvailabilityZone: us-east-1a
      MapPublicIpOnLaunch: false
      Tags:
        - Key: Name
          Value: poc-private-subnet-1

  PrivateSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: 10.0.21.0/24
      AvailabilityZone: us-east-1b
      MapPublicIpOnLaunch: false
      Tags:
        - Key: Name
          Value: poc-private-subnet-2

  ### Public Route Table
  PublicSubnetRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: poc-public-rt

  PublicSubnetRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicSubnet
      RouteTableId: !Ref PublicSubnetRouteTable

  PublicSubnetDefaultRoute:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref PublicSubnetRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway

  ### NAT Gateway for Private Subnets
  ElasticIP:
    Type: AWS::EC2::EIP
    Properties:
      Domain: vpc

  NATGateway:
    Type: AWS::EC2::NatGateway
    Properties:
      AllocationId: !GetAtt ElasticIP.AllocationId
      SubnetId: !Ref PublicSubnet
      Tags:
        - Key: Name
          Value: poc-nat-gateway

  ### Private Route Table
  PrivateRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: poc-private-rt

  PrivateSubnet1RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PrivateSubnet1
      RouteTableId: !Ref PrivateRouteTable

  PrivateSubnet2RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PrivateSubnet2
      RouteTableId: !Ref PrivateRouteTable

  PrivateDefaultRoute:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref PrivateRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !Ref NATGateway

  ### Security Groups
  RDSSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Allow DB access from Lambda
      VpcId: !Ref VPC

  LambdaSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Lambda functions security group
      VpcId: !Ref VPC

  RDSSGIngressFromLambda:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      GroupId: !Ref RDSSecurityGroup
      IpProtocol: tcp
      FromPort: 5432
      ToPort: 5432
      SourceSecurityGroupId: !Ref LambdaSecurityGroup

  LambdaSGEgressHTTPS:
    Type: AWS::EC2::SecurityGroupEgress
    Properties:
      GroupId: !Ref LambdaSecurityGroup
      IpProtocol: tcp
      FromPort: 443
      ToPort: 443
      CidrIp: 0.0.0.0/0

  LambdaSGEgressToRDS:
    Type: AWS::EC2::SecurityGroupEgress
    Properties:
      GroupId: !Ref LambdaSecurityGroup
      IpProtocol: tcp
      FromPort: 5432
      ToPort: 5432
      DestinationSecurityGroupId: !Ref RDSSecurityGroup

  ### Aurora PostgreSQL (multi-AZ) with Data API
  DBSubnetGroup:
    Type: AWS::RDS::DBSubnetGroup
    Properties:
      DBSubnetGroupDescription: Aurora pgvector private subnet group (multi-AZ)
      SubnetIds:
        - !Ref PrivateSubnet1
        - !Ref PrivateSubnet2

  ### VPC Endpoints for Private Subnet access
  SecretsManagerVPCEndpoint:
    Type: AWS::EC2::VPCEndpoint
    Properties:
      VpcId: !Ref VPC
      ServiceName: !Sub com.amazonaws.${AWS::Region}.secretsmanager
      SubnetIds:
        - !Ref PrivateSubnet1
        - !Ref PrivateSubnet2
      SecurityGroupIds:
        - !Ref LambdaSecurityGroup
      VpcEndpointType: Interface

  S3VPCEndpoint:
    Type: AWS::EC2::VPCEndpoint
    Properties:
      VpcId: !Ref VPC
      ServiceName: !Sub com.amazonaws.${AWS::Region}.s3
      RouteTableIds:
        - !Ref PrivateRouteTable
      VpcEndpointType: Gateway

  BedrockVPCEndpoint:
    Type: AWS::EC2::VPCEndpoint
    Properties:
      VpcId: !Ref VPC
      ServiceName: !Sub com.amazonaws.${AWS::Region}.bedrock-runtime
      SubnetIds:
        - !Ref PrivateSubnet1
        - !Ref PrivateSubnet2
      SecurityGroupIds:
        - !Ref LambdaSecurityGroup
      VpcEndpointType: Interface

  DBSecret:
    Type: AWS::SecretsManager::Secret
    Properties:
      Name: bedrock-ingest-poc-secrets-db/credentials
      Description: "Credentials for Aurora PostgreSQL used by Bedrock PoC"
      GenerateSecretString:
        SecretStringTemplate: !Sub '{"username":"${DBUsername}","dbname":"${DBName}"}'
        GenerateStringKey: password
        PasswordLength: 20
        ExcludeCharacters: '/@" '   # ✅ exclude invalid characters

  RDSCluster:
    Type: AWS::RDS::DBCluster
    Properties:
      Engine: aurora-postgresql
      EngineVersion: "15.5"   # ✅ Upgrade target (must support pgvector >=0.5.0)
      DatabaseName: !Ref DBName
      MasterUsername: !Join ["", ["{{resolve:secretsmanager:", !Ref DBSecret, ":SecretString:username}}"]]
      MasterUserPassword: !Join ["", ["{{resolve:secretsmanager:", !Ref DBSecret, ":SecretString:password}}"]]
      DBSubnetGroupName: !Ref DBSubnetGroup
      VpcSecurityGroupIds:
        - !Ref RDSSecurityGroup
      StorageEncrypted: true
      Port: 5432
      DeletionProtection: false
      EnableHttpEndpoint: true   # ✅ Enables RDS Data API

  RDSClusterInstance:
    Type: AWS::RDS::DBInstance
    DeletionPolicy: Retain
    UpdateReplacePolicy: Retain
    Properties:
      DBClusterIdentifier: !Ref RDSCluster
      DBInstanceClass: !Ref InstanceClass
      Engine: aurora-postgresql
      PubliclyAccessible: false
      AllowMajorVersionUpgrade: true

  ### IAM Role for Lambda
  LambdaExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
        - arn:aws:iam::aws:policy/AmazonRDSFullAccess
        - arn:aws:iam::aws:policy/AmazonS3FullAccess
        - arn:aws:iam::aws:policy/AmazonOpenSearchServiceFullAccess
      Policies:
        - PolicyName: BedrockS3RDSAccess
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              # S3 Access
              - Effect: Allow
                Action:
                  - s3:ListBucket
                  - s3:GetObject
                  - s3:PutObject
                Resource:
                  - arn:aws:s3:::bedrock-ingest-bucket
                  - arn:aws:s3:::bedrock-ingest-bucket/*
              # Secrets Manager
              - Effect: Allow
                Action:
                  - secretsmanager:GetSecretValue
                Resource: !Ref DBSecret
              # RDS Access
              - Effect: Allow
                Action:
                  - rds:*
                  - rds-db:connect
                  - rds-data:ExecuteStatement
                  - rds-data:BatchExecuteStatement
                  - rds-data:BeginTransaction
                  - rds-data:CommitTransaction
                  - rds-data:RollbackTransaction
                  - rds-data:*
                Resource: "*"
              # Bedrock Permissions (expanded)
              - Effect: Allow
                Action:
                  - bedrock:InvokeModel
                Resource: !Sub arn:aws:bedrock:${AWS::Region}::foundation-model/amazon.titan-embed-text-v1

              - Effect: Allow
                Action:
                  - bedrock:StartIngestionJob
                  - bedrock:GetIngestionJob
                  - bedrock:ListIngestionJobs
                  - bedrock:CreateKnowledgeBase
                  - bedrock:StartKnowledgeBaseSync
                  - bedrock:Retrieve
                  - bedrock:RetrieveAndGenerate
                Resource: !Sub arn:aws:bedrock:${AWS::Region}:${AWS::AccountId}:knowledge-base/*

               # -------------------- OpenSearch Serverless --------------------
              - Effect: Allow
                Action:
                  - aoss:CreateCollection
                  - aoss:DescribeCollection
                  - aoss:UpdateCollection
                  - aoss:DeleteCollection
                  - aoss:BatchPutDocument
                  - aoss:BatchDeleteDocument
                  - aoss:VectorSearch
                  - aoss:ReadDocument
                  - aoss:ListCollections
                  - aoss:CreateIndex
                Resource: "*"
      
              # EC2 Networking
              - Effect: Allow
                Action:
                  - ec2:CreateNetworkInterface
                  - ec2:DescribeNetworkInterfaces
                  - ec2:DeleteNetworkInterface
                Resource: "*"

  ### Lambda Functions (all in private subnets)
  InitDBLambda:
    Type: AWS::Lambda::Function
    DependsOn: RDSClusterInstance   # ✅ Ensures DB is created before init Lambda
    Properties:
      FunctionName: poc-init-db
      Runtime: python3.11
      Handler: init_db.lambda_handler
      Role: !GetAtt LambdaExecutionRole.Arn
      Timeout: 300
      MemorySize: 512
      VpcConfig:
        SecurityGroupIds:
          - !Ref LambdaSecurityGroup
        SubnetIds:
          - !Ref PrivateSubnet1
          - !Ref PrivateSubnet2
      Code:
        S3Bucket: bedrock-ingest-bucket
        S3Key: lambda/init_db.zip
      Layers:
        - arn:aws:lambda:us-east-1:017000801446:layer:AWSLambdaPowertoolsPythonV2:78
      Environment:
        Variables:
          INPUT_S3_DIR: bedrock-ingest-bucket
          DB_SECRET_ARN: !Ref DBSecret
          DB_NAME: !Ref DBName
          DB_USER: !Ref DBUsername
          DB_CLUSTER_ARN: !Ref RDSCluster
          DB_HOST: !GetAtt RDSCluster.Endpoint.Address
          DB_PORT: !GetAtt RDSCluster.Endpoint.Port
          REGION: us-east-1
          RESET_DB: "true"   # Set to "true" to drop & recreate tables

  InvokeInitDB:
    Type: Custom::InvokeLambda
    DependsOn: 
      - InitDBLambda
    Properties:
      ServiceToken: !GetAtt InitDBLambda.Arn

  ### SINGLE Lambda Function
  S3HandlerLambda:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: poc-s3-handler
      Runtime: python3.11
      Handler: main_handler.lambda_handler  # main entry that calls ingest + kb
      Role: !GetAtt LambdaExecutionRole.Arn
      Timeout: 600
      MemorySize: 2048
      VpcConfig:
        SecurityGroupIds:
          - !Ref LambdaSecurityGroup
        SubnetIds:
          - !Ref PrivateSubnet1
          - !Ref PrivateSubnet2
      Layers:
        - arn:aws:lambda:us-east-1:632944299864:layer:ingest-dependencies-layer:63
      Code:
        S3Bucket: bedrock-ingest-bucket
        S3Key: lambda/s3_handler.zip
      Environment:
        Variables:
          S3_BUCKET_NAME: bedrock-ingest-bucket
          METADATA_FIELDS: "tenant_id,user_id,document_id,project_id,thread_id"
          S3_INCOMING_PREFIX: bedrock-poc-docs/
          REGION: us-east-1
          # DB
          DB_HOST: !GetAtt RDSCluster.Endpoint.Address
          DB_PORT: !GetAtt RDSCluster.Endpoint.Port
          DB_NAME: !Ref DBName
          DB_SECRET_ARN: !Ref DBSecret
          # Bedrock
          KB_ID: !GetAtt BedrockKnowledgeBase.KnowledgeBaseId
          DATA_SOURCE_ID: !GetAtt KnowledgeBaseDataSource.DataSourceId
          # OpenSearch
          # OPENSEARCH_ENDPOINT: !GetAtt OpenSearchCollection.CollectionEndpoint
          # OPENSEARCH_INDEX: !Ref OpenSearchIndexName
          # Processing
          CHUNK_SIZE: 300
          VECTOR_DIM: 1536
          TOP_K: 5
          MAX_POLL_SECONDS: 120
          POLL_INTERVAL: 5

  LambdaPermissionForS3:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !Ref S3HandlerLambda
      Action: lambda:InvokeFunction
      Principal: s3.amazonaws.com
      SourceArn: arn:aws:s3:::bedrock-ingest-bucket
      SourceAccount: !Ref AWS::AccountId

  ### Bedrock Knowledge Base IAM Role
  BedrockKnowledgeBaseRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - bedrock.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AmazonRDSDataFullAccess
        - arn:aws:iam::aws:policy/SecretsManagerReadWrite
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      Policies:
        - PolicyName: BedrockKBExtraPermissions
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Sid: BedrockKnowledgeBaseIngestion
                Effect: Allow
                Action:
                  - bedrock:StartIngestionJob
                  - bedrock:GetIngestionJob
                  - bedrock:ListIngestionJobs
                Resource: !Sub arn:aws:bedrock:${AWS::Region}:${AWS::AccountId}:knowledge-base/poc-bedrock-kb*
              - Effect: Allow
                Action:
                  - s3:GetObject
                  - s3:ListBucket
                Resource:
                  - arn:aws:s3:::bedrock-ingest-bucket
                  - arn:aws:s3:::bedrock-ingest-bucket/*
              - Effect: Allow
                Action:
                  - rds:DescribeDBClusters
                  - rds:DescribeDBInstances
                Resource: "*"
              - Effect: Allow
                Action:
                  - rds-data:ExecuteStatement
                  - rds-data:BatchExecuteStatement
                Resource: !Sub "arn:aws:rds:${AWS::Region}:${AWS::AccountId}:cluster/${RDSCluster}"
              - Effect: Allow
                Action:
                  - bedrock:InvokeModel
                Resource: !Sub "arn:aws:bedrock:${AWS::Region}::foundation-model/amazon.titan-embed-text-v1"
              
  # ------------------------
  # 1️⃣  Encryption Policy
  # ------------------------
  # OpenSearchEncryptionPolicy:
  #   Type: AWS::OpenSearchServerless::SecurityPolicy
  #   Properties:
  #     Name: kb-chunks-encryption
  #     Type: encryption
  #     Policy: !Sub |
  #       {
  #         "Rules": [
  #           {
  #             "ResourceType": "collection",
  #             "Resource": ["collection/kb-chunks"]
  #           }
  #         ],
  #         "AWSOwnedKey": true
  #       }

  # # ------------------------
  # # 2️⃣  Network Policy
  # # ------------------------
  # OpenSearchNetworkPolicy:
  #   Type: AWS::OpenSearchServerless::SecurityPolicy
  #   Properties:
  #     Name: kb-chunks-network
  #     Type: network
  #     Policy: !Sub |
  #       [
  #         {
  #           "Rules": [
  #             {
  #               "ResourceType": "collection",
  #               "Resource": ["collection/kb-chunks"]
  #             },
  #             {
  #               "ResourceType": "dashboard",
  #               "Resource": ["collection/kb-chunks"]
  #             }
  #           ],
  #           "AllowFromPublic": true
  #         }
  #       ]

  # # ------------------------
  # # 3️⃣  OpenSearch Collection
  # # ------------------------
  # OpenSearchCollection:
  #   Type: AWS::OpenSearchServerless::Collection
  #   DependsOn:
  #     - OpenSearchEncryptionPolicy
  #     - OpenSearchNetworkPolicy
  #   Properties:
  #     Name: kb-chunks
  #     Type: VECTORSEARCH
  #     Description: "Serverless collection for knowledge base chunks"

  # # ------------------------
  # # 4️⃣  OpenSearch Data Access Policy
  # # ------------------------
  # OpenSearchDataAccessPolicy:
  #   Type: AWS::OpenSearchServerless::AccessPolicy
  #   Properties:
  #     Name: kb-chunks-access
  #     Type: data
  #     Description: Allow Lambda/Bedrock role to access collection and index
  #     Policy: !Sub |
  #       [
  #         {
  #           "Rules": [
  #             {
  #               "ResourceType": "index",
  #               "Resource": ["index/kb-chunks/*"],
  #               "Permission": [
  #                 "aoss:CreateIndex",
  #                 "aoss:ReadDocument",
  #                 "aoss:WriteDocument",
  #                 "aoss:UpdateIndex",
  #                 "aoss:DescribeIndex"
  #               ]
  #             }
  #           ],
  #           "Principal": [
  #             "${LambdaExecutionRole.Arn}",
  #             "${BedrockKnowledgeBaseRole.Arn}",
  #             "arn:aws:iam::${AWS::AccountId}:root"
  #           ]
  #         }
  #       ]
  
  # # Custom Resource Lambda to Create OpenSearch Index
  # CreateIndexLambda:
  #   Type: AWS::Lambda::Function
  #   DependsOn:
  #     - OpenSearchCollection
  #     - OpenSearchDataAccessPolicy
  #   Properties:
  #     FunctionName: poc-create-opensearch-index
  #     Runtime: python3.11
  #     Handler: index.lambda_handler
  #     Role: !GetAtt LambdaExecutionRole.Arn
  #     Timeout: 300
  #     Code:
  #       S3Bucket: bedrock-ingest-bucket
  #       S3Key: lambda/index.zip    
  #     Environment:
  #       Variables:
  #         REGION: us-east-1
  #     Layers:
  #       - arn:aws:lambda:us-east-1:632944299864:layer:ingest-dependencies-layer:63

  # InvokeCreateIndex:
  #   Type: Custom::CreateOpenSearchIndex
  #   DependsOn:
  #     - CreateIndexLambda
  #     - OpenSearchDataAccessPolicy
  #   Properties:
  #     ServiceToken: !GetAtt CreateIndexLambda.Arn
  #     CollectionEndpoint: !GetAtt OpenSearchCollection.CollectionEndpoint
  #     IndexName: kb-sync-data-index
  #     Region: us-east-1

  # ---------------- Bedrock Knowledge Base ----------------
  BedrockKnowledgeBase:
    Type: AWS::Bedrock::KnowledgeBase
    DependsOn:  
      # - OpenSearchCollection
      # - InvokeCreateIndex  # Changed from OpenSearchCollectionIndexs
      # - OpenSearchDataAccessPolicy
      # - OpenSearchEncryptionPolicy
      # - OpenSearchNetworkPolicy
      #- BedrockKnowledgeBaseRole
      - InvokeInitDB
    Properties:
      Name: poc-bedrock-kb-ingest
      Description: "Knowledge Base using OpenSearch vector backend"
      RoleArn: !GetAtt BedrockKnowledgeBaseRole.Arn
      KnowledgeBaseConfiguration:
        Type: VECTOR
        VectorKnowledgeBaseConfiguration:
          EmbeddingModelArn: arn:aws:bedrock:us-east-1::foundation-model/amazon.titan-embed-text-v1
      StorageConfiguration:
        # Type: "OPENSEARCH_SERVERLESS"
        # OpensearchServerlessConfiguration:
        #   CollectionArn: !GetAtt OpenSearchCollection.Arn  
        #   VectorIndexName: kb-sync-data-index
        #   FieldMapping:
        #     VectorField: embedding_vector
        #     TextField: chunk_text
        #     MetadataField: metadata
        Type: RDS
        RdsConfiguration:
          ResourceArn: !GetAtt RDSCluster.DBClusterArn
          CredentialsSecretArn: !Ref DBSecret
          DatabaseName: !Ref DBName
          TableName: "document_chunks"
          FieldMapping:
            PrimaryKeyField: chunk_id
            VectorField: embedding_vector
            TextField: chunk_text
            MetadataField: metadata
      
  # ---------------- Bedrock Data Source ----------------
  KnowledgeBaseDataSource:
    Type: AWS::Bedrock::DataSource
    DependsOn: 
      - BedrockKnowledgeBase
    Properties:
      KnowledgeBaseId: !GetAtt BedrockKnowledgeBase.KnowledgeBaseId
      Name: "S3-DataSource"
      Description: "S3 for Bedrock ingestion"
      DataSourceConfiguration:
        Type: S3
        S3Configuration:
          BucketArn: arn:aws:s3:::bedrock-ingest-bucket
          InclusionPrefixes:
            - "bedrock-poc-docs/"

Outputs:
  RDSClusterEndpoint:
    Description: Aurora cluster endpoint
    Value: !GetAtt RDSCluster.Endpoint.Address

  RDSClusterPort:
    Description: Aurora cluster port
    Value: !GetAtt RDSCluster.Endpoint.Port

  DBSecretArn:
    Description: Secrets Manager ARN containing DB credentials
    Value: !Ref DBSecret

  InitDBLambdaName:
    Description: Lambda function to initialize DB
    Value: !Ref InitDBLambda

  S3HandlerLambdaName:
    Description: Lambda function for ingestion
    Value: !Ref S3HandlerLambda
  
  # OpenSearchCollectionEndpoint:
  #   Description: "OpenSearch Serverless Collection Endpoint"
  #   Value: !GetAtt OpenSearchCollection.CollectionEndpoint
  
  # OpenSearchCollectionArn:
  #   Description: ARN of the OpenSearch Serverless collection.
  #   Value: !GetAtt OpenSearchCollection.Arn

  BedrockKnowledgeBaseArn:
    Description: ARN of the Bedrock Knowledge Base
    Value: !Ref BedrockKnowledgeBase

  BedrockKnowledgeBaseId:
    Description: Name of the Bedrock Knowledge Base
    Value: !GetAtt BedrockKnowledgeBase.KnowledgeBaseId

  BedrockKnowledgeBaseRoleArn:
    Description: IAM Role ARN used by Bedrock Knowledge Base
    Value: !GetAtt BedrockKnowledgeBaseRole.Arn